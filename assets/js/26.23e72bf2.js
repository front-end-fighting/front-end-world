(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{320:function(t,a,s){"use strict";s.r(a);var n=s(14),e=Object(n.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[t._v("HTML 是一种相当简单的、由不同元素组成的标记语言，用来告知浏览器如何组织页面的。")]),t._v(" "),a("p",[t._v("文档对象模型（DOM）是 HTML 和 XML 文档的编程接口。DOM 将文档解析为一个由 DOM 节点和相关对象（包含属性和方法的对象）组成的结构集合。尽管我们通常会使用 JavaScript 来访问 DOM，但它并不是 JavaScript 的一部分，它也可以被其他语言使用。")]),t._v(" "),a("h1",{attrs:{id:"_1-html-元素"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-html-元素"}},[t._v("#")]),t._v(" 1. HTML 元素")]),t._v(" "),a("p",[t._v("几乎所有网页都是有这样的结构组成：")]),t._v(" "),a("div",{staticClass:"language-html extra-class"},[a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("html")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("lang")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("zh-cmn-Hans"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token special-attr"}},[a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("style")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),a("span",{pre:!0,attrs:{class:"token value css language-css"}},[a("span",{pre:!0,attrs:{class:"token property"}},[t._v("font-size")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 109.4px"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("head")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("head")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("body")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("body")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("html")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),a("p",[t._v("其中：")]),t._v(" "),a("p",[t._v("(1) "),a("code",[t._v("<html></html>")]),t._v("元素是页面的根元素，它描述完整的网页。"),a("br"),t._v("\n(2) "),a("code",[t._v('lang="zh-cmn-Hans" style="font-size: 109.4px;"')]),t._v("是用来描述"),a("code",[t._v("<html>")]),t._v("元素的属性，属性常用来描述元素的额外信息。"),a("br"),t._v("\n(3) "),a("code",[t._v("<head></head>")]),t._v("元素包含了我们想包含在 HTML 页面中、但不希望显示在网页里的内容，包括 CSS 样式、Javascript 脚本、元数据描述等。"),a("br"),t._v("\n(4) "),a("code",[t._v("<body></body>")]),t._v("元素包含了我们访问页面时、所有显示在页面上的内容，也就是我们能看到的内容。")]),t._v(" "),a("p",[t._v("HTML 中的元素特别多，除了以上提到的，还包括"),a("code",[t._v("<text>")]),t._v("、"),a("code",[t._v("<div>")]),t._v("、"),a("code",[t._v("<a>")]),t._v("等以及各种自定义元素。")]),t._v(" "),a("h4",{attrs:{id:"_2-dom-解析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-dom-解析"}},[t._v("#")]),t._v(" 2. DOM 解析")]),t._v(" "),a("p",[t._v("我们常见的 HTML 元素，在浏览器中会被解析成节点。比如下面这样的 HTML 内容：")]),t._v(" "),a("div",{staticClass:"language-html extra-class"},[a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("html")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("head")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("title")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("文档标题"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("title")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("head")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("body")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("a")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("href")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("xx.com/xx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("我的链接"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("a")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("h1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("我的标题"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("h1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("body")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("html")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),a("p",[t._v("在浏览器中会被解析成节点，如图：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://github-imglib-1255459943.cos.ap-chengdu.myqcloud.com/ct_htmltree.gif",alt:"HTML元素解析成节点"}})]),t._v(" "),a("p",[t._v("在控制台，我们也能比较清晰地看到这样的层级关系，如图：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://zhuanlan-1255459943.cos.ap-guangzhou.myqcloud.com/1/1-9.png",alt:"控制台HTML层级关系"}})]),t._v(" "),a("p",[t._v("节点树中的节点彼此拥有层级关系，父（"),a("code",[t._v("parent")]),t._v("）、子（"),a("code",[t._v("child")]),t._v("）和同胞（"),a("code",[t._v("sibling")]),t._v("）等术语用于描述这些关系。父节点拥有子节点，同级的子节点被称为同胞（兄弟或姐妹）。在节点树中，顶端节点被称为根（"),a("code",[t._v("root")]),t._v("）。节点树相关内容还包括：")]),t._v(" "),a("ul",[a("li",[t._v("除了根节点（根节点没有父节点）以外，每个节点都有父节点")]),t._v(" "),a("li",[t._v("一个节点可拥有任意数量的子节点")]),t._v(" "),a("li",[t._v("相同父节点的子节点，互为同胞节点")])]),t._v(" "),a("p",[t._v("通过 HTML DOM 相关接口，我们可以使用 JavaScript 来访问节点树中的所有节点，也可以创建或删除节点。因此，所有 HTML 元素（节点）均可被修改。DOM 接口主要用于操作 DOM 节点，如常见的增删查改：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("document.getElementById(id)")]),t._v("：根据 id 获取元素")]),t._v(" "),a("li",[a("code",[t._v("document.createElement(name)")]),t._v("：创建元素")]),t._v(" "),a("li",[a("code",[t._v("parentNode.appendChild(node)")]),t._v("：添加子元素")]),t._v(" "),a("li",[a("code",[t._v("element.innerHTML")]),t._v("：设置/获取元素内容")])]),t._v(" "),a("p",[t._v("通常什么时候会用呢，最常见的便是列表的维护，包括增加新的选项、删除某个、修改某个等等。在浏览器兼容性问题很多的时候，我们常常会使用"),a("code",[t._v("jQuery")]),t._v("来进行些 DOM 操作，如今兼容性问题逐渐变少，大家更倾向于用原生 DOM 接口来进行操作。")]),t._v(" "),a("p",[t._v("随着应用程序越来越复杂，DOM 操作越来越频繁，需要监听事件和在事件回调用更新页面的 DOM 操作也越来越多，性能消耗则会比较大。于是虚拟 DOM 的想法便被人提出，并在许多框架中都有实现。虚拟 DOM 其实是用来模拟真实 DOM 的中间产物，主要包括以下功能：")]),t._v(" "),a("ul",[a("li",[t._v("用 JS 对象模拟 DOM 树，简化 DOM 对象\n"),a("ul",[a("li",[t._v("简单来说，就是用一个对象模拟 DOM 元素，保留主要的一些 DOM 属性，其他的则去掉")]),t._v(" "),a("li",[t._v("通过这种方式，可以减少 DOM Diff 时候的计算量")])])]),t._v(" "),a("li",[t._v("使用虚拟 DOM，结合操作 DOM 的接口，来生成真实 DOM\n"),a("ul",[a("li",[t._v("使用假 DOM 生成真 DOM，同时保持真实 DOM 对象的引用，一边下一个步骤的执行")])])]),t._v(" "),a("li",[t._v("更新 DOM 时，比较两棵虚拟 DOM 树的差异，局部更新真实 DOM")])]),t._v(" "),a("h1",{attrs:{id:"_2-dom-事件流"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-dom-事件流"}},[t._v("#")]),t._v(" 2. DOM 事件流")]),t._v(" "),a("p",[t._v("DOM 事件流描述的就是各个元素从页面中接受事件的顺序。DOM 事件流（event flow）存在三个阶段：")]),t._v(" "),a("ul",[a("li",[t._v("事件捕获阶段（从文档的根节点流向目标对象）")]),t._v(" "),a("li",[t._v("处于目标阶段（在目标对向上被触发）")]),t._v(" "),a("li",[t._v("事件冒泡阶段（再回溯到文档的根节点）。")])]),t._v(" "),a("p",[t._v("关于 DOM 事件流以及以上的三个阶段，我们需要知道：")]),t._v(" "),a("ul",[a("li",[t._v("事件捕获：\n"),a("ul",[a("li",[t._v("当鼠标点击或者触发 DOM 事件时，浏览器会从根节点开始由外到内进行事件传播，即点击了子元素，如果父元素通过事件捕获方式注册了对应的事件的话，会先触发父元素绑定的事件")]),t._v(" "),a("li",[t._v("在事件捕获的概念下在"),a("code",[t._v("p")]),t._v("元素上发生"),a("code",[t._v("click")]),t._v("事件的顺序应该是"),a("code",[t._v("document -> html -> body -> div -> p")])])])]),t._v(" "),a("li",[t._v("事件冒泡：\n"),a("ul",[a("li",[t._v("与事件捕获恰恰相反，事件冒泡顺序是由内到外进行事件传播，直到根节点")]),t._v(" "),a("li",[t._v("在事件冒泡的概念下在"),a("code",[t._v("p")]),t._v("元素上发生"),a("code",[t._v("click")]),t._v("事件的顺序应该是"),a("code",[t._v("p -> div -> body -> html -> document")])])])])]),t._v(" "),a("p",[t._v("DOM 标准事件流的触发的先后顺序为：先捕获再冒泡。也就是说，当触发 DOM 事件时会先进行事件捕获，捕获到事件源之后通过事件传播进行事件冒泡。不同的浏览器对此有着不同的实现，IE10 及以下不支持捕获型事件，所以就少了一个事件捕获阶段，IE11、Chrome 、Firefox、Safari 等浏览器则同时存在。")]),t._v(" "),a("h1",{attrs:{id:"事件委托"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#事件委托"}},[t._v("#")]),t._v(" 事件委托")]),t._v(" "),a("p",[t._v("基于事件冒泡机制，我们可以实现将子元素的事件委托给父级元素来进行处理。当我们需要对很多元素添加事件的时候，可以通过将事件添加到它们的父节点而将事件委托给父节点来触发处理函数。这样能解决什么问题呢：")]),t._v(" "),a("ul",[a("li",[t._v("绑定子元素会绑定很多次的绑定，而绑定父元素只需要一次绑定")]),t._v(" "),a("li",[t._v("将事件委托给父节点，这样我们对子元素的增加和删除、移动等，都不需要重新进行事件绑定")])]),t._v(" "),a("p",[t._v("常见的使用方式还是以列表为例子，每个选项都可以进行编辑、删除、添加标签等功能，而把事件委托给父元素，不管我们新增、删除、更新选项，都不需手动去绑定和移除事件。比如：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 给id为my-list的元素绑定click事件")]),t._v("\ndocument"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getElementById")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"my-list"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("addEventListener")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"click"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("e")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 兼容性处理")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" event "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" e "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" window"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("event"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" target "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" event"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("target "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" event"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("srcElement"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 判断是否匹配目标元素")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("target"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("nodeName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("toLocaleLowerCase "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"button"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"you clicked a button"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" target"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("innerHTML"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("这个事件委托的过程实现方式为：")]),t._v(" "),a("p",[t._v("(1) 在父层（或更外层）元素上绑定某类事件。"),a("br"),t._v("\n(2) 事件触发的时候，检查源元素"),a("code",[t._v("event.target")]),t._v("是否符合预期。"),a("br"),t._v("\n(3) 如果事件发生在我们需要处理的元素里，则进行后续的处理。")]),t._v(" "),a("p",[t._v("如果在列表数量内容较大的时候，对成千上万节点进行事件监听，也是不小的性能消耗。使用事件委托的方式，我们可以大量减少浏览器对元素的监听，也是在前端性能优化中比较简单和基础的一个做法。")]),t._v(" "),a("p",[t._v("需要注意的是，如果我们直接在"),a("code",[t._v("document.body")]),t._v("上进行事件委托，可能会带来额外的问题。由于浏览器在进行页面渲染的时候会有合成的步骤，合成的过程会先将页面分成不同的合成层，而用户与浏览器进行交互的时候需要接收事件。此时，浏览器会将页面上具有事件处理程序的区域进行标记，被标记的区域会与主线程进行通信。")]),t._v(" "),a("p",[t._v("如果我们"),a("code",[t._v("document.body")]),t._v("上被绑定了事件，这时候整个页面都会被标记。即使我们的页面不关心某些部分的用户交互，合成器线程也必须与主线程进行通信，并在每次事件发生时进行等待。这种情况，我们可以使用"),a("code",[t._v("passive: true")]),t._v("选项来解决。")]),t._v(" "),a("h1",{attrs:{id:"_3-bom"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-bom"}},[t._v("#")]),t._v(" 3. BOM")]),t._v(" "),a("p",[t._v("BOM 即 Browser Object Model，浏览器对象模型。BOM 主要处理浏览器窗口和框架，通常浏览器特定的 JavaScript 扩展也都被看做 BOM 的一部分。BOM 是各个浏览器厂商根据 DOM 在各自浏览器上的实现，表现为不同浏览器定义有差别、实现方式不同。Javacsript 是通过访问 BOM 对象来访问、控制、修改客户端(浏览器)。")]),t._v(" "),a("p",[t._v("DOM（Document Object Model 文档对象模型）是为了操作文档出现的 API，包括"),a("code",[t._v("document")]),t._v("。BOM（Browser Object Model 浏览器对象模型）是为了操作浏览器出现的 API，包括"),a("code",[t._v("window")]),t._v("/"),a("code",[t._v("location")]),t._v("/"),a("code",[t._v("history")]),t._v("等。")])])}),[],!1,null,null,null);a.default=e.exports}}]);